{
	"info": {
		"_postman_id": "41775f3a-6644-4c8d-bd11-4fbe045a13a4",
		"name": "Study",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Manual",
			"item": [
				{
					"name": "CSV + JSON",
					"item": [
						{
							"name": "Register",
							"id": "e73faf9d-8859-4efa-839f-bb6892e64ac4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://reqres.in/api/register/"
							},
							"response": []
						}
					],
					"id": "5a2f4ea5-b5db-452a-ba02-6b42a530ea23"
				},
				{
					"name": "Test Collection 1",
					"item": [
						{
							"name": "List Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8be0ad4-110b-42b6-a992-a0d7385d4099",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify than page equals 2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.page).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "da9b5b29-ea3d-4998-8d3f-a7d520fda103",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users?page=2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration",
							"id": "1796b5fa-52f5-4d35-b9c6-8986b1291942",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://reqres.in/api/register/"
							},
							"response": []
						},
						{
							"name": "Single User",
							"id": "1c891cf3-4f5a-424b-8938-447908632fce",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}api/users/2"
							},
							"response": []
						}
					],
					"id": "771e5636-4e9b-4f9a-b2e9-ee7914ed48e9"
				},
				{
					"name": "SOAP",
					"item": [
						{
							"name": "Untitled Request",
							"id": "d24e639d-6482-4f75-b4f8-655b9a44db94",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <Body>\r\n        <CapitalCity xmlns=\"http://www.oorsprong.org/websamples.countryinfo\">\r\n            <sCountryISOCode>RU</sCountryISOCode>\r\n        </CapitalCity>\r\n    </Body>\r\n</Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL",
									"protocol": "http",
									"host": [
										"webservices",
										"oorsprong",
										"org"
									],
									"path": [
										"websamples.countryinfo",
										"CountryInfoService.wso"
									],
									"query": [
										{
											"key": "WSDL",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "f4c5ba5b-52db-4970-b034-23cb4a2a2cc0"
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "http://users.bugred.ru/user/login/index.html",
							"id": "cbbd51b2-62d9-4591-9268-505288ed938c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "host",
										"value": "users.bugred.ru"
									},
									{
										"key": "proxy-connection",
										"value": "keep-alive"
									},
									{
										"key": "content-length",
										"value": "36"
									},
									{
										"key": "cache-control",
										"value": "max-age=0"
									},
									{
										"key": "origin",
										"value": "http://users.bugred.ru"
									},
									{
										"key": "dnt",
										"value": "1"
									},
									{
										"key": "upgrade-insecure-requests",
										"value": "1"
									},
									{
										"key": "content-type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 YaBrowser/23.1.5.708 Yowser/2.5 Safari/537.36"
									},
									{
										"key": "accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "referer",
										"value": "http://users.bugred.ru/user/login/index.html"
									},
									{
										"key": "accept-encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9"
									},
									{
										"key": "cookie",
										"value": "PHPSESSID=20472e437f8ada7b2101e60ccc04f9c6"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "test59359@mail.ru"
										},
										{
											"key": "password",
											"value": "1"
										}
									]
								},
								"url": "http://users.bugred.ru/user/login/index.html"
							},
							"response": []
						}
					],
					"id": "263de2b6-cd5d-485b-adf6-9403371795cc"
				},
				{
					"name": "Confluence",
					"item": [
						{
							"name": "doRegister",
							"id": "85506c26-64fb-428c-8e08-e8a0976a131f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test1234@mail.ru\",\r\n    \"name\": \"Алексей1\",\r\n    \"password\": \"test1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "CreateCompany",
							"id": "452bc48b-0d92-4c7f-ab02-03de8a34d82f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"company_name\": \"Манго\",\r\n  \"company_type\": \"ООО\",\r\n  \"company_users\": [\"test123@mail.ru\", \"test1234@mail.ru\"],\r\n  \"email_owner\": \"test123@mail.ru\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/createcompany"
							},
							"response": []
						},
						{
							"name": "CreateUser",
							"id": "7897e405-49d4-44dd-a055-c4b086d164b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"pochkavirta@mail.ru\",\r\n  \"name\": \"pochkavirta\",\r\n  \"tasks\": [10],\r\n  \"companies\": [1,50],\r\n  \"hobby\":\"Фильмы и игры\",\r\n  \"adres\":\"Москва\",\r\n  \"name1\":\"Алексей\",\r\n  \"surname1\":\"Голышкин\",\r\n  \"fathername1\":\"Максимович\",\r\n  \"cat\":\"Кузя\",\r\n  \"dog\":\"Кузя1\",\r\n  \"parrot\":\"Попугай\",\r\n  \"cavy\":\"Морская свинка\",\r\n  \"hamster\":\"Хомяк\",\r\n  \"squirrel\":\"Белка\",\r\n  \"phone\":\"+79995552244\",\r\n  \"inn\":\"123456789012\",\r\n  \"gender\":\"m\",\r\n  \"birthday\":\"11.01.1990\",\r\n  \"date_start\":\"01.04.2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/createuser"
							},
							"response": []
						},
						{
							"name": "CreateUserWithTasks",
							"id": "a334a66a-c6a8-4fae-8d07-51b0622d694a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"email\": \"pochkavirta@mail.com\",\r\n \"name\": \"pochkavirta1\",\r\n \"tasks\": [{\r\n   \"title\": \"Задача по тестированию\",\r\n   \"description\": \"Протестировать первую задачу\"\r\n  },\r\n  {\r\n   \"title\": \"Задача по тестированию\",\r\n   \"description\": \"Протестировать вторую задачу\"\r\n  }\r\n ],\r\n \"companies\": [1, 50],\r\n \"hobby\":\"Фильмы и игры\",\r\n  \"adres\":\"Москва\",\r\n  \"name1\":\"Алексей\",\r\n  \"surname1\":\"Голышкин\",\r\n  \"fathername1\":\"Максимович\",\r\n  \"cat\":\"Кузя\",\r\n  \"dog\":\"Кузя1\",\r\n  \"parrot\":\"Попугай\",\r\n  \"cavy\":\"Морская свинка\",\r\n  \"hamster\":\"Хомяк\",\r\n  \"squirrel\":\"Белка\",\r\n  \"phone\":\"+79995552244\",\r\n  \"inn\":\"123456789012\",\r\n  \"gender\":\"m\",\r\n  \"birthday\":\"11.01.1990\",\r\n  \"date_start\":\"01.04.2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/createuserwithtasks"
							},
							"response": []
						},
						{
							"name": "AddAvatar",
							"id": "7d597d56-1105-46b0-841b-3be5f67bc4ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "pochkavirta@mail.com",
											"type": "text"
										},
										{
											"key": "avatar",
											"type": "file",
											"src": "/C:/Users/golys/OneDrive/Рабочий стол/CHtobyi-CHto-byi.jpg"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/addavatar"
							},
							"response": []
						},
						{
							"name": "DeleteAvatar",
							"id": "1abcdb51-2602-4f11-9932-98a748048bfd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "pochkavirta@mail.com",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/deleteavatar"
							},
							"response": []
						},
						{
							"name": "MagicSearchName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "155ed54b-6207-481f-b6c4-b6b76eaec60d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "91722e3c-9e5c-4d22-8eb9-ae67ab54963a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Голышкин\",\r\n\"partyType\":\"USER\",\r\n\"fullSimilarity\":\"True\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "MagicSearchName1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "155ed54b-6207-481f-b6c4-b6b76eaec60d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1ab65e1c-e58d-4475-8a0b-06e8d1a00890",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Голышкин\",\r\n\"partyType\":\"USER\",\r\n\"fullSimilarity\":\"True\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"USER\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "MagicSearchCompany",
							"id": "8916ef36-b2ea-4fa6-a078-6aa38a5833e8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Манго\",\r\n\"partyType\":\"COMPANY\",\r\n\"fullSimilarity\":\"True\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						}
					],
					"id": "5055173d-652d-48de-99e7-0d4d337e97bd"
				}
			],
			"id": "ff484292-4ee4-48f7-b0c2-6e99252a18d6"
		},
		{
			"name": "Automation",
			"item": [
				{
					"name": "Lesson 1",
					"item": [
						{
							"name": "Регистрация пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"/* Здесь было очень много текста,\r",
											"который поясняет, что идет далее в тесте\r",
											"чтобы в самом тесте сделать короткое название */\r",
											"pm.test(\"'Status code is 200' \\\r",
											"часть 2\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.response);\r",
											"console.log(pm.response.code);\r",
											"\r",
											"console.log(pm.request);\r",
											"\r",
											"console.log(\"ПОСЛЕ запроса\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											"console.log(\"ДО запроса\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "58c86004-9ae3-4cb4-ac66-85e45bf6f9ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "230 — никого не нашли по запросу, пустой ответ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1a8ef91-4d05-460a-863a-c116645471ba",
										"exec": [
											"pm.test(\"Не нашло пользователя\", function () {\r",
											"    pm.response.to.have.status(230);\r",
											"});\r",
											"\r",
											"pm.test(\"Сломанный тест\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "94e96caf-7d94-4f72-9d99-141b63cbf74d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Голышкин1\",\r\n\"partyType\":\"USER\",\r\n\"fullSimilarity\":\"True\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "231 - найден 1 юзер",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1a8ef91-4d05-460a-863a-c116645471ba",
										"exec": [
											"pm.test(\"Нашло пользователя\", function () {\r",
											"    pm.response.to.have.status(231);\r",
											"});\r",
											"\r",
											"pm.test(\"Сломанный тест\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "06436aa5-961e-463f-b87f-6d1a57dbae49",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Голышкин\",\r\n\"partyType\":\"USER\",\r\n\"fullSimilarity\":\"True\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "232 — найдено больше 1 юзера (но без компаний)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1a8ef91-4d05-460a-863a-c116645471ba",
										"exec": [
											"pm.test(\"Нашло больше 1 пользователя\", function () {\r",
											"    pm.response.to.have.status(232);\r",
											"});\r",
											"\r",
											"pm.test(\"Сломанный тест\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "de0641d2-c6c9-4e50-ae1e-bb8e32cdfe6a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Алексей1\",\r\n\"partyType\":\"USER\",\r\n\"fullSimilarity\":\"False\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "233 — найдена 1 компания",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "773234ec-ad6e-430a-a42f-a0bc81486114",
										"exec": [
											"pm.test(\"Нашло 1 компанию\", function () {\r",
											"    pm.response.to.have.status(233);\r",
											"});\r",
											"\r",
											"pm.test(\"Сломанный тест\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f7b6d7fa-8106-40be-92c9-e5ca2efa0c61",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Манго\",\r\n\"partyType\":\"COMPANY\",\r\n\"fullSimilarity\":\"True\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "234 — найдено больше 1 компании (но без юзеров)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "773234ec-ad6e-430a-a42f-a0bc81486114",
										"exec": [
											"pm.test(\"Нашло больше 1 компании\", function () {\r",
											"    pm.response.to.have.status(234);\r",
											"});\r",
											"\r",
											"pm.test(\"Сломанный тест\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "40d34bb8-4aaa-43e6-9150-5b9fce5c6416",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Манго\",\r\n\"partyType\":\"COMPANY\",\r\n\"fullSimilarity\":\"True\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "235 — найдены как юзеры, так и компании",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "773234ec-ad6e-430a-a42f-a0bc81486114",
										"exec": [
											"pm.test(\"Нашли пользователей и компании\", function () {\r",
											"    pm.response.to.have.status(235);\r",
											"});\r",
											"\r",
											"pm.test(\"Сломанный тест\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3ce29e24-c44b-4bdc-810d-4f91fd29086c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Unbranded Granite Table\",\r\n\"partyType\":\"ALL\",\r\n\"fullSimilarity\":\"False\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "455 — не указан параметр query в запросе",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "773234ec-ad6e-430a-a42f-a0bc81486114",
										"exec": [
											"pm.test(\"Не указан query\", function () {\r",
											"    pm.response.to.have.status(455);\r",
											"});\r",
											"\r",
											"pm.test(\"Сломанный тест\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0392a9bd-344a-4c5b-bbe3-0e636a8b19d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"partyType\":\"ALL\",\r\n\"fullSimilarity\":\"False\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "456 — длина запроса выше 1000 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1a8ef91-4d05-460a-863a-c116645471ba",
										"exec": [
											"pm.test(\"Длина запроса больше 1000 символов\", function () {\r",
											"    pm.response.to.have.status(456);\r",
											"});\r",
											"\r",
											"pm.test(\"Сломанный тест\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9b4feb2b-df90-480b-a1cb-234a8c49d16f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1Голышкин1\",\r\n\"partyType\":\"USER\",\r\n\"fullSimilarity\":\"True\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "457 — неправильно задан partyType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1a8ef91-4d05-460a-863a-c116645471ba",
										"exec": [
											"pm.test(\"Неверно указан partyType\", function () {\r",
											"    pm.response.to.have.status(457);\r",
											"});\r",
											"\r",
											"pm.test(\"Сломанный тест\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "489bec55-2382-40ca-8ab8-dc0a63a0bcd6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Голышкин1\",\r\n\"partyType\":\"USER1\",\r\n\"fullSimilarity\":\"True\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "458 — неправильно задан параметр taskStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1a8ef91-4d05-460a-863a-c116645471ba",
										"exec": [
											"pm.test(\"Неверно указан taskStatus\", function () {\r",
											"    pm.response.to.have.status(458);\r",
											"});\r",
											"\r",
											"pm.test(\"Сломанный тест\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "92a658a2-4027-4795-a8a0-b1bed1db5b0b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Голышкин1\",\r\n\"partyType\":\"USER\",\r\n\"fullSimilarity\":\"True\",\r\n\"taskStatus\":\"ALL1\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						},
						{
							"name": "459 — неправильно задан параметр include",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1a8ef91-4d05-460a-863a-c116645471ba",
										"exec": [
											"pm.test(\"Неверно указан include\", function () {\r",
											"    pm.response.to.have.status(459);\r",
											"});\r",
											"\r",
											"pm.test(\"Сломанный тест\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6a74f0e3-f8dc-4163-b9b2-fa559a64f30e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Голышкин1\",\r\n\"partyType\":\"USER\",\r\n\"fullSimilarity\":\"True\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL1\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						}
					],
					"id": "ec9e8d05-1577-4fb7-bcb7-374bf337fece"
				},
				{
					"name": "Lesson 2",
					"item": [
						{
							"name": "Chai.js",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"// SNIPPETS\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// Test examples (Postman doc)\r",
											"pm.test(\"to.include для статус кода не сработает!\", function () {\r",
											"  pm.expect(pm.response.code).to.include(\"200\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.eql строка не равно число\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(\"200\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.eql\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code через to.below\", function () {\r",
											"  pm.expect(pm.response.code).to.below(300);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code через to.above\", function () {\r",
											"  pm.expect(pm.response.code).to.above(100);\r",
											"});\r",
											"\r",
											"// Postman Sandbox API reference doc\r",
											"pm.test(\"Status code - info\", function () {\r",
											"  pm.response.to.be.info;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code - success\", function () {\r",
											"  pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code - ok\", function () {\r",
											"  pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"// Chai official doc\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.equal\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.deep.equal\", function () {\r",
											"  pm.expect(pm.response.code).to.deep.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.equal неточное равенство\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(\"200\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.deep.equal неточное равенство\", function () {\r",
											"  pm.expect(pm.response.code).to.deep.equal(\"200\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.deep.include\", function () {\r",
											"  pm.expect(pm.response.code).to.deep.include(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.a string\", function () {\r",
											"  pm.expect(pm.response.code).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.a number\", function () {\r",
											"  pm.expect(pm.response.code).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.true\", function () {\r",
											"  pm.expect(pm.response.code === 200).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.false\", function () {\r",
											"  pm.expect(pm.response.code === 204).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.ok\", function () {\r",
											"  pm.expect(pm.response.code === 200).to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.not.be.ok\", function () {\r",
											"  pm.expect(pm.response.code === 400).to.not.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.null\", function () {\r",
											"  pm.expect(pm.response.code).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.not.be.null\", function () {\r",
											"  pm.expect(pm.response.code).to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.not.be.undefined\", function () {\r",
											"  pm.expect(pm.response.code).to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.not.be.NaN\", function () {\r",
											"  pm.expect(pm.response.code).to.not.be.NaN;\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.exist\", function () {\r",
											"  pm.expect(pm.response.code).to.be.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.empty - не работает\", function () {\r",
											"  pm.expect(pm.response.code).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.at.least\", function () {\r",
											"  pm.expect(pm.response.code).to.be.at.least(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.at.most\", function () {\r",
											"  pm.expect(pm.response.code).to.be.at.most(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.at.within\", function () {\r",
											"  pm.expect(pm.response.code).to.be.at.within(100, 300);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code - число (instanceof)\", function () {\r",
											"  pm.expect(pm.response.code).to.be.an.instanceof(Number);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.match\", function () {\r",
											"  pm.expect(pm.response.code).to.match(/^200/);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.have.string\", function () {\r",
											"  pm.expect(pm.response.code).to.have.string(\"200\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.closeTo (x+-y)\", function () {\r",
											"  pm.expect(pm.response.code).to.be.closeTo(200, 1);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через to.be.finite\", function () {\r",
											"  pm.expect(pm.response.code).to.be.finite;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "16ed2c23-d465-4d3a-b654-adb7f5a54981",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "Node.js",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"const assert = require('assert');\r",
											"\r",
											"pm.test(\"Тест через assert.ok\", function () {\r",
											"    assert.ok(pm.response.code === 200);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert\", function () {\r",
											"    assert(pm.response.code === 200);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.deepEqual\", function () {\r",
											"    assert.deepEqual(pm.response.code, 200);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.deepStrictEqual\", function () {\r",
											"    assert.deepStrictEqual(pm.response.code, 200);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.deepEqual приведение типов\", function () {\r",
											"    assert.deepEqual(pm.response.code, \"200\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.deepStrictEqual приведение типов\", function () {\r",
											"    assert.deepStrictEqual(pm.response.code, \"200\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.equal\", function () {\r",
											"    assert.equal(pm.response.code, 200);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.strictEqual\", function () {\r",
											"    assert.strictEqual(pm.response.code, 200);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.equal приведение типов\", function () {\r",
											"    assert.equal(pm.response.code, \"200\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.strictEqual приведение типов\", function () {\r",
											"    assert.strictEqual(pm.response.code, \"200\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "75339f29-d6f0-4799-aae3-e243137afa98",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "JIRA: тестируем статус код после создания комментария и проверяем заголовок Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5d72d7a-a64a-4c4b-9bde-fdd5d99ecb91",
										"exec": [
											"pm.test(\"Статус: Created\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type: есть\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ Content-Type: application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ Content-Type: application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a84d7d67-bb0c-4919-8c55-cf85f7693729",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "ATATT3xFfGF0V14aGvtOT5vTnbN9NJFQqPvbOcxGpKUDZc2zIkES8vmYhkrVghNpDgSjNmKzbfvOPM8xciApP0b42_z2dqYruAqBo1SYZ9UJIUJ4K6gXcg255LpXw0VbZqPGIrEMJpbe4s2HOBoeYk6ZlhqqgBzetDoAvdAktgaTNzGGYzw_wuk=A2B237C1",
										"username": "pochkavirta@gmail.com"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"body\": {\r\n    \"content\": [\r\n      {\r\n        \"content\": [\r\n          {\r\n            \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.\",\r\n            \"type\": \"text\"\r\n          }\r\n        ],\r\n        \"type\": \"paragraph\"\r\n      }\r\n    ],\r\n    \"type\": \"doc\",\r\n    \"version\": 1\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://pochkavirta.atlassian.net/rest/api/3/issue/POCH-2/comment"
							},
							"response": []
						},
						{
							"name": "MagicSearch: проверяем наличие генерального в базе",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5d72d7a-a64a-4c4b-9bde-fdd5d99ecb91",
										"exec": [
											"pm.test(\"Статус 231\", function () {\r",
											"    pm.response.to.have.status(231);\r",
											"});\r",
											"\r",
											"pm.test(\"Статус ОК\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2fd7c4cc-caaa-424b-9178-280d284830c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "ATATT3xFfGF06b6VvUUnvah4qpvtnYkwZ6TG5Klkwy47w56f0_QKXfUUIKsYEKyuaK1f8ZgSrKxsiUUWBitTHqSmUncHBPHrdBvt1U8CQA8GHTWRWPtMcjvx1OMjkYwLWc5W3Q_kqKjnBVtNU-3x4rYUBI7Up_FTHTgEhMLpsZIZrQ9Hg5sHbsI=BCA0BEB1",
										"username": "pochkavirta@gmail.com"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\":\"Лунатиков\",\r\n\"partyType\":\"USER\",\r\n\"fullSimilarity\":\"False\",\r\n\"taskStatus\":\"ALL\",\r\n\"include\":\"ALL\",\r\n\"maxCount\":\"30\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/magicsearch"
							},
							"response": []
						}
					],
					"id": "5a126cdb-366b-4d32-84b2-8c6667fe70a7"
				},
				{
					"name": "Lesson 3",
					"item": [
						{
							"name": "Test body from snippet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"pm.test(\"Проверка ошибки\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    console.log(pm.response);\r",
											"    console.log(jsonData);\r",
											"    console.log(pm.response.json());\r",
											"    \r",
											"    pm.expect(jsonData.type).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "051fb7cf-44c8-4e0e-a3cc-abcc68247cc6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "Test var, let, const",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"const jsonData1 = pm.response.json();\r",
											"\r",
											"pm.test(\"const\", function () {\r",
											"    console.log(jsonData1);\r",
											"    pm.expect(jsonData1.type).to.eql(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"var\", function () {\r",
											"    var jsonData2 = pm.response.json();\r",
											"    console.log(jsonData2);\r",
											"    pm.expect(jsonData2.type).to.eql(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"let\", function () {\r",
											"    let jsonData3 = pm.response.json();\r",
											"    pm.expect(jsonData3.type).to.eql(\"error\");\r",
											"    console.log(jsonData3);\r",
											"});\r",
											"\r",
											"pm.test(\"noName\", function () {\r",
											"    jsonData4 = pm.response.json();\r",
											"    pm.expect(jsonData4.type).to.eql(\"error\");\r",
											"});\r",
											"console.log(jsonData4);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6bb2b772-76c0-434d-bfdc-9ddc47cadd55",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "Достать значение из простого JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"console.log(jsonData.type);\r",
											"console.log(jsonData[\"type\"]);\r",
											"console.log(jsonData['type']);\r",
											"\r",
											"console.log(jsonData.message);\r",
											"console.log(jsonData[\"message\"]);\r",
											"console.log(jsonData['message']);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "87ac5a07-1b38-42ce-b5c5-1895bd4446c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "Подсказки: JSON в ответе",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36ef4128-54be-463d-ae6a-5bda2c7cb830",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"console.log(jsonData);\r",
											"\r",
											"anna = jsonData.suggestions[0].value;\r",
											"console.log(anna);\r",
											"\r",
											"anna_gender = jsonData.suggestions[0].data.gender;\r",
											"anna_gender_1 = jsonData[\"suggestions\"][0][\"data\"][\"gender\"];\r",
											"anna_gender_2 = jsonData['suggestions'][0]['data']['gender'];\r",
											"\r",
											"console.log(anna_gender);\r",
											"console.log(anna_gender_1);\r",
											"console.log(anna_gender_2);\r",
											"\r",
											"pm.test(\"Анна первая, пыщ-пыщ!\", function () {\r",
											"    pm.expect(anna).to.eql(\"Анна\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3a7fcaa6-e017-429d-ac1f-697212966784",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": {
										"value": "Token 120c0451489c05101534fd1d970d33c1c5550dee",
										"key": "Authorization"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"query\": \"Ан\",\r\n    \"gender\": \"FEMALE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/fio"
							},
							"response": []
						},
						{
							"name": "Подсказки: XML в ответе",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36ef4128-54be-463d-ae6a-5bda2c7cb830",
										"exec": [
											"var jsonData = xml2Json(responseBody);\r",
											"console.log(jsonData);\r",
											"\r",
											"anna = jsonData.SuggestResponse.suggestions[0].value;\r",
											"console.log(anna);\r",
											"\r",
											"anna_gender = jsonData.SuggestResponse.suggestions[0].data.gender;\r",
											"anna_gender_1 = jsonData[\"SuggestResponse\"][\"suggestions\"][0][\"data\"][\"gender\"];\r",
											"anna_gender_2 = jsonData['SuggestResponse']['suggestions'][0]['data']['gender'];\r",
											"anna_gender_3 = jsonData['SuggestResponse'].suggestions[0][\"data\"]['gender'];\r",
											"\r",
											"console.log(anna_gender);\r",
											"console.log(anna_gender_1);\r",
											"console.log(anna_gender_2);\r",
											"console.log(anna_gender_3);\r",
											"\r",
											"pm.test(\"Анна первая, пыщ-пыщ!\", function () {\r",
											"    pm.expect(anna).to.eql(\"Анна\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5ef429b2-b974-4188-b474-90a9ca77faa1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": {
										"value": "Token 120c0451489c05101534fd1d970d33c1c5550dee",
										"key": "Authorization"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"query\": \"Ан\",\r\n    \"gender\": \"FEMALE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/fio"
							},
							"response": []
						},
						{
							"name": "Object.keys doRegister",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(pm.response);\r",
											"//console.log(pm.response.headers[2].value);\r",
											"console.log(Object.keys(pm.response));\r",
											"console.log(Object.keys(pm.response.headers));\r",
											"console.log(pm.response.headers.members[2].value);\r",
											"\r",
											"pm.test(\"Проверка ошибки\", function () {    \r",
											"    pm.expect(pm.response.json().type).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "65aa5cbe-72d3-4380-827b-8336c3136bda",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "Подсказки: найди Малахова!",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36ef4128-54be-463d-ae6a-5bda2c7cb830",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"malahov = jsonData.suggestions[2].data.surname;\r",
											"console.log(malahov);\r",
											"\r",
											"pm.test(\"Малахов фамилия\", function () {\r",
											"    pm.expect(malahov).to.eql(\"Малахов\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "770c5c50-d853-487c-a73a-4ceede277cdb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": {
										"value": "Token 120c0451489c05101534fd1d970d33c1c5550dee",
										"key": "Authorization"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\": \"Андрей Мал\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/fio"
							},
							"response": []
						},
						{
							"name": "getuserfull",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e654fec-3dcb-41f6-a569-0a4a06e054ce",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"console.log(jsonData.email);\r",
											"console.log(jsonData[\"name\"]);\r",
											"console.log(jsonData['password']);\r",
											"\r",
											"companyTwo = jsonData.companys[1].name;\r",
											"console.log(companyTwo);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2b4eee27-ce46-4798-b23f-e5af5cac3e96",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test129@email.com",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/getuserfull"
							},
							"response": []
						},
						{
							"name": "Reqres.in: найти «Charles»",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f2f5d7b-8aa1-4b8b-8e6d-fc6a78f53fc9",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"total = jsonData.total;\r",
											"console.log(total);\r",
											"\r",
											"charles = jsonData.data[4].first_name;\r",
											"console.log(charles);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "34a31bed-45b1-4faa-ac38-b994b81963df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://reqres.in/api/users?page=1",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Jira: достаем поля",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5d72d7a-a64a-4c4b-9bde-fdd5d99ecb91",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"projectIssue = jsonData.fields.project.name;\r",
											"console.log(projectIssue);\r",
											"\r",
											"urlIssue = jsonData.self;\r",
											"console.log(urlIssue);\r",
											"\r",
											"numberIssue = jsonData.id;\r",
											"console.log(numberIssue);\r",
											"\r",
											"keyIssue = jsonData.key;\r",
											"console.log(keyIssue);\r",
											"\r",
											"nameAuthorIssue = jsonData.fields.creator.displayName;\r",
											"console.log(nameAuthorIssue);\r",
											"\r",
											"emailAuthorIssue = jsonData.fields.creator.emailAddress;\r",
											"console.log(emailAuthorIssue);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f7484bfc-d3e3-4b1d-9d75-216ffc46d993",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "ATATT3xFfGF0B5iJ8LWXtRHbuz6kBlnRR98wo78IGHIfgf6YmAerLtxesiP2tTqzDe74ljqDMuHnQRBjBxmbhUMPVdpU99cD4i_mWzqACvziyShxgPhiaQXLmZ0w7cNTiXwLzNGajE9Y7GtiYSh8EzL0lH1mvZai4wLG9TqlWKVHH33JuBUxJz0=7D80DEB9",
										"username": "pochkavirta@gmail.com"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://pochkavirta.atlassian.net/rest/api/3/issue/POCH-2/"
							},
							"response": []
						}
					],
					"id": "627ce5b0-b45a-4bb3-a83a-5a2b17263123"
				},
				{
					"name": "Lesson 4",
					"item": [
						{
							"name": "4_bad_tests",
							"item": [
								{
									"name": "1. why_block",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5b49581-efa7-4815-9a18-88b1de18d644",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"// не было [] (неправильно переписан массив)",
													"pm.test(\"Блок why_block показывает, по чему искали\", function () {",
													"    pm.expect(jsonData.results[0].why_block).to.deep.eql([",
													"                {",
													"                    \"field\": \"name\",",
													"                    \"value\": \"Ромашка\"",
													"                }",
													"            ]);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f19232c5-0dcb-41ee-a446-622409a1d89b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "query",
													"value": "Ромашка",
													"type": "text"
												}
											]
										},
										"url": "http://users.bugred.ru/tasks/rest/magicsearch"
									},
									"response": []
								},
								{
									"name": "2. Красавчик — алкоголик!",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c0b401f-aa76-44f4-971d-c5f782999174",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"// не было deep (позволяет спуститься ниже по массиву)",
													"pm.test(\"Работает в алкоголиках и тунеяндцах\", function () {",
													"    pm.expect(jsonData.results[0].companies).to.deep.include({",
													"                    \"name\": \"Алкоголики и тунеядцы\",",
													"                    \"id_company\": 15",
													"                });",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f1eea120-823c-43f1-96ed-cd53cf0cba01",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "query",
													"value": "test_cu_11@mail.com",
													"type": "text"
												}
											]
										},
										"url": "http://users.bugred.ru/tasks/rest/magicsearch"
									},
									"response": []
								},
								{
									"name": "3. nested",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db66fa58-56a0-43f6-a221-60502122d267",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"// не было доступа к базе, написал свой маршрут",
													"pm.test(\"Your test name\", function () {  ",
													"    pm.expect(jsonData).to.nested.include({'fields.assignee': null});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e1593838-01a9-4e46-b78c-72f78ce609d4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "pochkavirta@gmail.com",
												"password": "ATATT3xFfGF0jGEjoo1SAOIpBUnBsHS2VgWkXSgOn9nrzlII3nvsBDD0PvdnrNwF5mnprrpIrBDojnQ4gjqboU6na01TX9GwusG13to_A7bqa76Gi6QGYf0BDC15bnl_nqScrVk--9v8iu-y7OoKBWkaBnAji8WuN3H0w9SXmOwb1hmCasUDB1U=AAC9C2F4"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": "https://pochkavirta.atlassian.net/rest/api/3/issue/POCH-2/"
									},
									"response": []
								}
							],
							"id": "3f313f7b-c176-4576-8aa0-3fb586396c91"
						},
						{
							"name": "Text простой",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa46d1d0-872d-4ab1-8d3a-4b557ceefd13",
										"exec": [
											"// SNIPPETS\r",
											"pm.test(\"User-agent: *\\nDisallow: /deny\\n\", function () {\r",
											"    pm.response.to.have.body(\"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Вхождение части строки: Disallow: /deny\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Disallow: /deny\");\r",
											"});\r",
											"\r",
											"pm.test(\"Проверяем строку целиком: User-agent: *\\nDisallow: /deny\\n\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"console.log(pm.responce);\r",
											"console.log(pm.response.text());\r",
											"\r",
											"// https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/\r",
											"\r",
											"pm.test(\"Проверяем, что тело в принципе есть\", function () {\r",
											"    pm.response.to.have.body();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "02f93a36-d8b1-4066-957a-7c2154862624",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://httpbin.org/robots.txt"
							},
							"response": []
						},
						{
							"name": "Text рисунок",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa46d1d0-872d-4ab1-8d3a-4b557ceefd13",
										"exec": [
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"\\n\\\r",
											"          .-''''''-.\\n\\\r",
											"        .' _      _ '.\\n\\\r",
											"       /   O      O   \\\\\\n\\\r",
											"      :                :\\n\\\r",
											"      |                |\\n\\\r",
											"      :       __       :\\n\\\r",
											"       \\\\  .-\\\"`  `\\\"-.  /\\n\\\r",
											"        '.          .'\\n\\\r",
											"          '-......-'\\n\\\r",
											"     YOU SHOULDN'T BE HERE\\n\\\r",
											"\");\r",
											"});\r",
											"\r",
											"pm.test(\"1 cтрока\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\".-''''''-.\");\r",
											"});\r",
											"\r",
											"pm.test(\"2 cтрока\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\".' _      _ '.\");\r",
											"});\r",
											"\r",
											"pm.test(\"3 cтрока\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"/   O      O   \\\\\");\r",
											"});\r",
											"\r",
											"pm.test(\"4 cтрока\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\":                :\");\r",
											"});\r",
											"\r",
											"pm.test(\"5 cтрока\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"|                |\");\r",
											"});\r",
											"\r",
											"pm.test(\"6 cтрока\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\":       __       :\");\r",
											"});\r",
											"\r",
											"pm.test(\"7 cтрока\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"\\\\  .-\\\"`  `\\\"-.  /\");\r",
											"});\r",
											"\r",
											"pm.test(\"8 cтрока\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"'.          .'\");\r",
											"});\r",
											"\r",
											"pm.test(\"9 cтрока\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"'-......-'\");\r",
											"});\r",
											"\r",
											"pm.test(\"10 cтрока\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"YOU SHOULDN'T BE HERE\");\r",
											"});\r",
											"\r",
											"pm.test(\"Первые 2 строки\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\".-''''''-.\").and.include(\".' _      _ '.\");\r",
											"});\r",
											"\r",
											"\r",
											"// получится только с большим пробелом после переноса строки, эти символы тоже учитываются\r",
											"pm.test(\"Первые 2 строки (одной строкой)\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\".-''''''-.\\n        .' _      _ '.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2ae1e5ac-e637-481c-adde-8e7bdd41dbb3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://httpbin.org/deny"
							},
							"response": []
						},
						{
							"name": "Text Chai.js",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa46d1d0-872d-4ab1-8d3a-4b557ceefd13",
										"exec": [
											"pm.test(\"Body matches через to.equal\", function () {\r",
											"    pm.expect(pm.response.text()).to.equal(\"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches через to.deep.equal\", function () {\r",
											"    pm.expect(pm.response.text()).to.deep.equal(\"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body - строка\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body - object\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Если не читать описание, а сразу пыщ пыщ, будем думать, что второй аргумент - это сама строка\r",
											"pm.test(\"Body - конкретная строка\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.a(\"string\", \"СТРАШНОЕ СООБЩЕНИЕ ОБ ОШИБКЕ\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body - конкретная строка 2\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.a(\"object\", \"nooo why fail??\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body через to.be.true ==\", function () {\r",
											"    pm.expect(pm.response.text() == \"User-agent: *\\nDisallow: /deny\\n\").to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Body через to.be.true ===\", function () {\r",
											"    pm.expect(pm.response.text() === \"User-agent: *\\nDisallow: /deny\\n\").to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Body через to.be.ok ==\", function () {\r",
											"    pm.expect(pm.response.text() == \"User-agent: *\\nDisallow: /deny\\n\").to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body через to.be.ok ===\", function () {\r",
											"    pm.expect(pm.response.text() === \"User-agent: *\\nDisallow: /deny\\n\").to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Body через to.have.lengthOf\", function () {\r",
											"    pm.expect(pm.response.text()).to.have.lengthOf(30);\r",
											"});\r",
											"\r",
											"pm.test(\"Body через to.have.lengthOf.above\", function () {\r",
											"    pm.expect(pm.response.text()).to.have.lengthOf.above(20);\r",
											"});\r",
											"\r",
											"pm.test(\"Body через to.have.lengthOf.at.least\", function () {\r",
											"    pm.expect(pm.response.text()).to.have.lengthOf.at.least(20);\r",
											"});\r",
											"\r",
											"pm.test(\"Body через not.be.empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Body через to.exist\", function () {\r",
											"    pm.expect(pm.response.text()).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Body через to.match\", function () {\r",
											"    pm.expect(pm.response.text()).to.match(/^User-agent: .*/);\r",
											"});\r",
											"\r",
											"pm.test(\"Body через to.have.string\", function () {\r",
											"    pm.expect(pm.response.text()).to.have.string('User-agent: *');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7c5ce7a1-8a8c-4f8c-97a1-b22e27448355",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://httpbin.org/robots.txt"
							},
							"response": []
						},
						{
							"name": "Text Node.js",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa46d1d0-872d-4ab1-8d3a-4b557ceefd13",
										"exec": [
											"const assert = require('assert');\r",
											"\r",
											"pm.test(\"Тест через assert.ok\", function () {\r",
											"    assert.ok(pm.response.text() == \"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert\", function () {\r",
											"    assert(pm.response.text() === \"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.deepEqual\", function () {\r",
											"    assert.deepEqual(pm.response.text(), \"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.deepStrictEqual\", function () {\r",
											"    assert.deepStrictEqual(pm.response.text(), \"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.deepEqual приведение типов\", function () {\r",
											"    assert.deepEqual(pm.response.text(), \"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.deepStrictEqual приведение типов\", function () {\r",
											"    assert.deepStrictEqual(pm.response.text(), \"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.equal\", function () {\r",
											"    assert.equal(pm.response.text(), \"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.strictEqual\", function () {\r",
											"    assert.strictEqual(pm.response.text(), \"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.equal приведение типов\", function () {\r",
											"    assert.equal(pm.response.text(), \"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert.strictEqual приведение типов\", function () {\r",
											"    assert.strictEqual(pm.response.text(), \"User-agent: *\\nDisallow: /deny\\n\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "25e682da-6beb-4285-b89b-0075de8666f2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://httpbin.org/robots.txt"
							},
							"response": []
						},
						{
							"name": "JSON doRegister snippets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Проверяем тип\", function () {\r",
											"    pm.expect(jsonData.type).to.eql(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Проверяем сообщение об ошибке\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\" email test_demo_1@gmail.com уже есть в базе\");\r",
											"});\r",
											"\r",
											"pm.test(\"Проверяем через jsonBody\", function () {\r",
											"    pm.response.to.have.jsonBody({\"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"});\r",
											"});\r",
											"\r",
											"pm.test(\"Проверяем через not.jsonBody\", function () {\r",
											"    pm.response.to.not.have.jsonBody('error');\r",
											"});\r",
											"\r",
											"pm.test(\"Проверяем тип и ообщение об ошибке\", function () {\r",
											"    pm.expect(jsonData.type).to.eql(\"error\");\r",
											"    pm.expect(jsonData.message).to.eql(\" email test_demo_1@gmail.com уже есть в базе\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body is correct\", function () {\r",
											"    pm.response.to.have.body({\"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"});\r",
											"});\r",
											"\r",
											"pm.test(\"Body type matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body message matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\" email test_demo_1@gmail.com \\\\u0443\\\\u0436\\\\u0435 \\\\u0435\\\\u0441\\\\u0442\\\\u044c \\\\u0432 \\\\u0431\\\\u0430\\\\u0437\\\\u0435\");\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());\r",
											"console.log(pm.response.text());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1e9b8ae0-585e-462b-85f7-a5e9647588d2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "JSON getuserfull snippets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Можно ли получить значение любого уровня вложенности?\r",
											"pm.test(\"Проверяем id и name компании\", function () {\r",
											"    pm.expect(jsonData.companys[2].id_company).to.eql(15);\r",
											"    pm.expect(jsonData.companys[2].name).to.eql(\"Алкоголики и тунеядцы\");\r",
											"});\r",
											"\r",
											"// Учимся различать строку и число\r",
											"pm.test(\"Число = число\", function () {\r",
											"    pm.expect(jsonData.companys[2].id_company).to.eql(15);\r",
											"});\r",
											"\r",
											"pm.test(\"Число = строка\", function () {\r",
											"    pm.expect(jsonData.companys[2].id_company).to.eql(\"15\");\r",
											"});\r",
											"\r",
											"pm.test(\"Строка = строка\", function () {\r",
											"    pm.expect(jsonData.companys[2].name).to.eql(\"Алкоголики и тунеядцы\");\r",
											"});\r",
											"\r",
											"pm.test(\"Строка = число\", function () {\r",
											"    pm.expect(jsonData.companys[2].name).to.eql(Алкоголики);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c255f8d8-6fa9-4249-8ff6-3348fca33138",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test_cu_11@mail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/getuserfull"
							},
							"response": []
						},
						{
							"name": "JSON doRegister equal",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"// Распарсили JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Простой элемент\r",
											"\r",
											"pm.test(\"Тест на type через equal\", function () {\r",
											"    pm.expect(jsonData.type).to.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест на type через to.deep.equal\", function () {\r",
											"    pm.expect(jsonData.type).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест на type через eql\", function () {\r",
											"    pm.expect(jsonData.type).to.eql(\"error\");\r",
											"});\r",
											"\r",
											"// Объект\r",
											"\r",
											"pm.test(\"Тест на объект через equal\", function () {\r",
											"    pm.expect(jsonData).to.equal({\r",
											"    \"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"Тест на объект через to.deep.equal\", function () {\r",
											"    pm.expect(jsonData).to.deep.equal({\r",
											"    \"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"Тест на объект через eql\", function () {\r",
											"    pm.expect(jsonData).to.eql({\r",
											"    \"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"\r",
											"});\r",
											"});\r",
											"\r",
											"// Тестируем алиасы\r",
											"\r",
											"pm.test(\"equals простой элемент\", function () {\r",
											"    pm.expect(jsonData.type).to.equals(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"equals объект (тест упадет)\", function () {\r",
											"    pm.expect(jsonData).to.equals({\r",
											"    \"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"eq простой элемент\", function () {\r",
											"    pm.expect(jsonData.type).to.eq(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"eq объект (тест упадет)\", function () {\r",
											"    pm.expect(jsonData).to.eq({\r",
											"    \"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"eqls простой элемент\", function () {\r",
											"    pm.expect(jsonData.type).to.eqls(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"eqls объект\", function () {\r",
											"    pm.expect(jsonData).to.eqls({\r",
											"    \"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"\r",
											"});\r",
											"});\r",
											"\r",
											"// Цепочка\r",
											"\r",
											"pm.test(\"to.deep.equal несколько ассершенов\", function () {\r",
											"    pm.expect(jsonData).to.deep.equal({\r",
											"    \"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"\r",
											"}).and.equal({\r",
											"    \"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "42a703bd-55d2-48bd-a2c1-0765b11cfa30",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "JSON getuserfull equal",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Точное или неточное равенство?\r",
											"pm.test(\"to.equal число = число\", function () {\r",
											"    pm.expect(jsonData.companys[2].id_company).to.equal(15);\r",
											"});\r",
											"\r",
											"pm.test(\"to.equal число = строка\", function () {\r",
											"    pm.expect(jsonData.companys[2].id_company).to.equal(\"15\");\r",
											"});\r",
											"\r",
											"pm.test(\"to.deep.equal число = число\", function () {\r",
											"    pm.expect(jsonData.companys[2].id_company).to.deep.equal(15);\r",
											"});\r",
											"\r",
											"pm.test(\"to.deep.equal число = строка\", function () {\r",
											"    pm.expect(jsonData.companys[2].id_company).to.deep.equal(\"15\");\r",
											"});\r",
											"\r",
											"pm.test(\"to.eql число = число\", function () {\r",
											"    pm.expect(jsonData.companys[2].id_company).to.eql(15);\r",
											"});\r",
											"\r",
											"pm.test(\"to.eql число = строка\", function () {\r",
											"    pm.expect(jsonData.companys[2].id_company).to.eql(\"15\");\r",
											"});\r",
											"\r",
											"// Исследуем deep\r",
											"\r",
											"pm.test(\"to.equal массив\", function () {\r",
											"    pm.expect(jsonData.tasks).to.equal([\r",
											"        {\r",
											"            \"name\": \"Новая\",\r",
											"            \"id_task\": 32\r",
											"        }\r",
											"    ]);\r",
											"});\r",
											"\r",
											"pm.test(\"to.deep.equal массив\", function () {\r",
											"    pm.expect(jsonData.tasks).to.deep.equal([\r",
											"        {\r",
											"            \"name\": \"Новая\",\r",
											"            \"id_task\": 32\r",
											"        }\r",
											"    ]);\r",
											"});\r",
											"\r",
											"pm.test(\"to.eql массив\", function () {\r",
											"    pm.expect(jsonData.tasks).to.eql([\r",
											"        {\r",
											"            \"name\": \"Новая\",\r",
											"            \"id_task\": 32\r",
											"        }\r",
											"    ]);\r",
											"});\r",
											"\r",
											"// Сравним строку и число через Chai.js\r",
											"\r",
											"pm.test(\"to.be.true\", function () {\r",
											"    pm.expect(jsonData.companys[0].id_company == \"44\").to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"to.be.ok\", function () {\r",
											"    pm.expect(jsonData.companys[0].id_company == \"44\").to.be.ok;\r",
											"});\r",
											"\r",
											"// Сравним строку и число через Node.js\r",
											"\r",
											"// Импорт библиотеки\r",
											"const assert = require('assert');\r",
											"\r",
											"pm.test(\"Тест через assert.ok\", function () {\r",
											"    assert.ok(jsonData.companys[0].id_company == \"44\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест через assert\", function () {\r",
											"    assert(jsonData.companys[0].id_company == \"44\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест node.js через deepEqual число = число\", function () {\r",
											"    assert.deepEqual(jsonData.companys[0].id_company, 44);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест node.js через deepEqual число = строка\", function () {\r",
											"    assert.deepEqual(jsonData.companys[0].id_company, \"44\");\r",
											"});\r",
											"\r",
											"pm.test(\"Тест node.js через deepStrictEqual число = число\", function () {\r",
											"    assert.deepStrictEqual(jsonData.companys[0].id_company, 44);\r",
											"});\r",
											"\r",
											"pm.test(\"Тест node.js через deepStrictEqual число = строка\", function () {\r",
											"    assert.deepStrictEqual(jsonData.companys[0].id_company, \"44\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b5257506-3f70-4a7e-b0d9-931e73673469",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test_cu_11@mail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/getuserfull"
							},
							"response": []
						},
						{
							"name": "JSON doRegister include",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"// Распарсили JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Ищем внутри простого элемента\r",
											"\r",
											"pm.test(\"Тест на type через include\", function () {\r",
											"    pm.expect(jsonData.type).to.include(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"include для части слова\", function () {\r",
											"    pm.expect(jsonData.type).to.include(\"err\");\r",
											"});\r",
											"\r",
											"pm.test(\"include для части фразы\", function () {\r",
											"    pm.expect(jsonData.message).to.include(\"уже есть в базе\");\r",
											"});\r",
											"\r",
											"// deep\r",
											"\r",
											"pm.test(\"Тест на type через to.deep.include\", function () {\r",
											"    pm.expect(jsonData.type).to.deep.include(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"to.deep.include для части слова\", function () {\r",
											"    pm.expect(jsonData.type).to.deep.include(\"err\");\r",
											"});\r",
											"\r",
											"pm.test(\"to.deep.include для части фразы\", function () {\r",
											"    pm.expect(jsonData.message).to.deep.include(\"уже есть в базе\");\r",
											"});\r",
											"\r",
											"// Ищем внутри объекта\r",
											"\r",
											"pm.test(\"to.include - ищем по всему объекту\", function () {\r",
											"    pm.expect(jsonData).to.include(\"err\");\r",
											"});\r",
											"\r",
											"pm.test(\"to.deep.include - ищем по всему объекту\", function () {\r",
											"    pm.expect(jsonData).to.deep.include(\"err\");\r",
											"});\r",
											"\r",
											"pm.test(\"to.include весь объект\", function () {\r",
											"    pm.expect(jsonData).to.include({\r",
											"    \"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"to.deep.include весь объект\", function () {\r",
											"    pm.expect(jsonData).to.deep.include({\r",
											"    \"type\": \"error\",\r",
											"    \"message\": \" email test_demo_1@gmail.com уже есть в базе\"\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"to.include не на весь объект, а на часть\", function () {\r",
											"    pm.expect(jsonData).to.include({\r",
											"    \"type\": \"error\",\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"to.deep.include не на весь объект, а на часть\", function () {\r",
											"    pm.expect(jsonData).to.deep.include({\r",
											"    \"type\": \"error\",\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "73a477be-2dc7-4165-9fb2-9c13033db4fe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "JSON подсказки include",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36ef4128-54be-463d-ae6a-5bda2c7cb830",
										"exec": [
											"// Распарсили JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"pm.test(\"Подсказка по Анне - include\", function () {\r",
											"    pm.expect(jsonData.suggestions).to.include({\r",
											"            \"value\": \"Анна\",\r",
											"            \"unrestricted_value\": \"Анна\",\r",
											"            \"data\": {\r",
											"                \"surname\": null,\r",
											"                \"name\": \"Анна\",\r",
											"                \"patronymic\": null,\r",
											"                \"gender\": \"FEMALE\",\r",
											"                \"source\": null,\r",
											"                \"qc\": \"0\"\r",
											"                }\r",
											"            });\r",
											"});\r",
											"\r",
											"pm.test(\"Подсказка по Анне - deep.include\", function () {\r",
											"    pm.expect(jsonData.suggestions).to.deep.include({\r",
											"            \"value\": \"Анна\",\r",
											"            \"unrestricted_value\": \"Анна\",\r",
											"            \"data\": {\r",
											"                \"surname\": null,\r",
											"                \"name\": \"Анна\",\r",
											"                \"patronymic\": null,\r",
											"                \"gender\": \"FEMALE\",\r",
											"                \"source\": null,\r",
											"                \"qc\": \"0\"\r",
											"                }\r",
											"            });\r",
											"});\r",
											"\r",
											"pm.test(\"deep.include - не первый элемент массива\", function () {\r",
											"    pm.expect(jsonData.suggestions).to.deep.include({\r",
											"            \"value\": \"Антонина\",\r",
											"            \"unrestricted_value\": \"Антонина\",\r",
											"            \"data\": {\r",
											"                \"surname\": null,\r",
											"                \"name\": \"Антонина\",\r",
											"                \"patronymic\": null,\r",
											"                \"gender\": \"FEMALE\",\r",
											"                \"source\": null,\r",
											"                \"qc\": \"0\"\r",
											"            }\r",
											"        });\r",
											"});\r",
											"\r",
											"pm.test(\"include дочерний объект 2 уровня\", function () {\r",
											"    pm.expect(jsonData.suggestions).to.include({\r",
											"                \"surname\": null,\r",
											"                \"name\": \"Антонина\",\r",
											"                \"patronymic\": null,\r",
											"                \"gender\": \"FEMALE\",\r",
											"                \"source\": null,\r",
											"                \"qc\": \"0\"\r",
											"            });\r",
											"});\r",
											"\r",
											"pm.test(\"deep.include дочерний объект 2 уровня\", function () {\r",
											"    pm.expect(jsonData.suggestions).to.deep.include({\r",
											"                \"surname\": null,\r",
											"                \"name\": \"Антонина\",\r",
											"                \"patronymic\": null,\r",
											"                \"gender\": \"FEMALE\",\r",
											"                \"source\": null,\r",
											"                \"qc\": \"0\"\r",
											"            });\r",
											"});\r",
											"\r",
											"pm.test(\"include дочерний объект 2 уровня, указав номер массива\", function () {\r",
											"    pm.expect(jsonData.suggestions[2].data).to.include({\r",
											"                \"surname\": null,\r",
											"                \"name\": \"Антонина\",\r",
											"                \"patronymic\": null,\r",
											"                \"gender\": \"FEMALE\",\r",
											"                \"source\": null,\r",
											"                \"qc\": \"0\"\r",
											"            });\r",
											"});\r",
											"\r",
											"pm.test(\"deep.include дочерний объект 2 уровня, указав номер массива\", function () {\r",
											"    pm.expect(jsonData.suggestions[2].data).to.deep.include({\r",
											"                \"surname\": null,\r",
											"                \"name\": \"Антонина\",\r",
											"                \"patronymic\": null,\r",
											"                \"gender\": \"FEMALE\",\r",
											"                \"source\": null,\r",
											"                \"qc\": \"0\"\r",
											"            });\r",
											"});\r",
											"\r",
											"// .nested\r",
											"\r",
											"pm.test(\"nested.include\", function () {\r",
											"    pm.expect(jsonData).to.nested.include({'suggestions[0].data.gender': 'FEMALE'});\r",
											"});\r",
											"\r",
											"pm.test(\"простой include\", function () {\r",
											"    pm.expect(jsonData.suggestions[0].data.gender).to.nested.include('FEM');\r",
											"});\r",
											"\r",
											"pm.test(\"deep.nested.include\", function () {\r",
											"    pm.expect(jsonData).to.deep.nested.include({'suggestions[0].data.gender': 'FEMALE'});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "08828ee5-746b-4ddf-8228-f2ad7409b552",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": {
										"value": "Token 120c0451489c05101534fd1d970d33c1c5550dee",
										"key": "Authorization"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\": \"Ан\",\r\n\"gender\": \"FEMALE\",\r\n\"count\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/fio"
							},
							"response": []
						},
						{
							"name": "JSON getuserfull include",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// сработает только deep\r",
											"\r",
											"pm.test(\"to.includes дочерний объект - одна компания\", function () {\r",
											"    pm.expect(jsonData.companys).to.includes({\r",
											"            \"name\": \"Алкоголики и тунеядцы\",\r",
											"            \"id_company\": 15\r",
											"        });\r",
											"});\r",
											"\r",
											"pm.test(\"to.deep.includes дочерний объект - одна компания\", function () {\r",
											"    pm.expect(jsonData.companys).to.deep.includes({\r",
											"            \"name\": \"Алкоголики и тунеядцы\",\r",
											"            \"id_company\": 15\r",
											"        });\r",
											"});\r",
											"\r",
											"pm.test(\"to.deep.includes дочерний объект - одна компания (ключи без кавычек)\", function () {\r",
											"    pm.expect(jsonData.companys).to.deep.includes({\r",
											"            name: \"Алкоголики и тунеядцы\",\r",
											"            id_company: 15\r",
											"        });\r",
											"});\r",
											"\r",
											"// Ищем ключи в объекте\r",
											"\r",
											"pm.test(\"to.includes ключей в объекте\", function () {\r",
											"    pm.expect(jsonData).to.includes({\r",
											"        \"hobby\": \"\",\r",
											"        \"name1\": \"Тестовый, ясен пень\",\r",
											"        \"surname1\": \"Иванов\",\r",
											"        \"fathername1\": \"Петров\",\r",
											"        });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ecdde9c6-a2ff-4412-a037-98f6cf7b9299",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test_cu_11@mail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/getuserfull"
							},
							"response": []
						},
						{
							"name": "JSON doRegister property",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"// Распарсили JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"// Наличие свойства\r",
											"\r",
											"pm.test(\"have.property есть свойство message\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"have.property есть свойство message через a\", function () {\r",
											"    pm.expect(jsonData).to.have.a.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Проверяем все свойства в одном тесте\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"// Значение свойства\r",
											"\r",
											"pm.test(\"Есть свойство message + проверяем его значение\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"message\", \" email test_demo_1@gmail.com уже есть в базе\");\r",
											"});\r",
											"\r",
											"// keys\r",
											"\r",
											"pm.test(\"Есть оба свойства\", function () {\r",
											"    pm.expect(jsonData).to.have.all.keys(\"type\", \"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Есть одно свойство type\", function () {\r",
											"    pm.expect(jsonData).to.have.any.keys(\"type\", \"msfse\");\r",
											"});\r",
											"\r",
											"pm.test(\"Есть одно свойство message\", function () {\r",
											"    pm.expect(jsonData).to.have.any.keys(\"tyfsdpe\", \"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9c82d984-ad38-4b85-acec-73e08b9c6c78",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						},
						{
							"name": "JSON подсказки property",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36ef4128-54be-463d-ae6a-5bda2c7cb830",
										"exec": [
											"// Распарсили JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"// Простой поиск свойств\r",
											"\r",
											"pm.test(\"have.property есть свойство suggestions\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"suggestions\");\r",
											"});\r",
											"\r",
											"pm.test(\"have.property есть свойство unrestricted_value\", function () {\r",
											"    pm.expect(jsonData.suggestions[0]).to.have.property(\"unrestricted_value\");\r",
											"});\r",
											"\r",
											"// deep\r",
											"\r",
											"pm.test(\"Проверим дочерний объект - свойство data\", function () {\r",
											"    pm.expect(jsonData.suggestions[0]).to.have.property(\"data\", {\r",
											"                \"surname\": null,\r",
											"                \"name\": \"Анна\",\r",
											"                \"patronymic\": null,\r",
											"                \"gender\": \"FEMALE\",\r",
											"                \"source\": null,\r",
											"                \"qc\": \"0\"\r",
											"            });\r",
											"});\r",
											"\r",
											"pm.test(\"Проверим дочерний объект - свойство data через deep\", function () {\r",
											"    pm.expect(jsonData.suggestions[0]).to.have.deep.property(\"data\", {\r",
											"                \"surname\": null,\r",
											"                \"name\": \"Анна\",\r",
											"                \"patronymic\": null,\r",
											"                \"gender\": \"FEMALE\",\r",
											"                \"source\": null,\r",
											"                \"qc\": \"0\"\r",
											"            });\r",
											"});\r",
											"\r",
											"// nested\r",
											"\r",
											"pm.test(\"have.property есть свойство gender\", function () {\r",
											"    pm.expect(jsonData.suggestions[0].data).to.have.property(\"gender\", \"FEMALE\");\r",
											"});\r",
											"\r",
											"pm.test(\"to.have.nested.property\", function () {\r",
											"    pm.expect(jsonData).to.have.nested.property(\"suggestions[0].data.gender\", \"FEMALE\");\r",
											"});\r",
											"\r",
											"pm.test(\"Проверим дочерний объект - свойство data через deep.nested\", function () {\r",
											"    pm.expect(jsonData).to.have.deep.nested.property(\"suggestions[0].data\", {\r",
											"                \"surname\": null,\r",
											"                \"name\": \"Анна\",\r",
											"                \"patronymic\": null,\r",
											"                \"gender\": \"FEMALE\",\r",
											"                \"source\": null,\r",
											"                \"qc\": \"0\"\r",
											"            });\r",
											"});\r",
											"\r",
											"// keys\r",
											"\r",
											"pm.test(\"keys для массива\", function () {\r",
											"    pm.expect(jsonData.suggestions).to.have.all.keys(0, 1, 2, 3, 4);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1fd70159-9e94-4d45-9843-c734320fe563",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": {
										"value": "Token 120c0451489c05101534fd1d970d33c1c5550dee",
										"key": "Authorization"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"query\": \"Ан\",\r\n\"gender\": \"FEMALE\",\r\n\"count\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/fio"
							},
							"response": []
						},
						{
							"name": "JSON getuserfull property",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"console.log(jsonData);\r",
											"\r",
											"// Простой поиск свойств\r",
											"\r",
											"pm.test(\"Проверяем наличие свойства tasks\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"tasks\");\r",
											"});\r",
											"\r",
											"pm.test(\"Проверяем свойство tasks\", function () {\r",
											"    pm.expect(jsonData).to.have.deep.property(\"tasks\", [\r",
											"        {\r",
											"            \"name\": \"Новая\",\r",
											"            \"id_task\": 32\r",
											"        }\r",
											"    ]);\r",
											"});\r",
											"\r",
											"// Тип свойства\r",
											"\r",
											"pm.test(\"Проверяем тип свойства - число\", function () {\r",
											"    pm.expect(jsonData.tasks[0]).to.have.property(\"id_task\").that.is.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Проверяем тип свойства - текст\", function () {\r",
											"    pm.expect(jsonData.tasks[0]).to.have.property(\"name\").that.is.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2f198e2e-432c-42b0-a431-6f0ae961d278",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test_cu_11@mail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/getuserfull"
							},
							"response": []
						},
						{
							"name": "Тестируем зайчика",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa46d1d0-872d-4ab1-8d3a-4b557ceefd13",
										"exec": [
											"var zai = (\"\\\r",
											"(\\\\__/)\\n\\\r",
											"(='.'=)\\n\\\r",
											"E[:]|||||[:]З\\n\\\r",
											"(\\\")_(\\\")\");\r",
											"\r",
											"console.log(zai);\r",
											"\r",
											"pm.test(\"Зайчик\", function () {\r",
											"    pm.expect(zai).to.eql(\"\\\r",
											"(\\\\__/)\\n\\\r",
											"(='.'=)\\n\\\r",
											"E[:]|||||[:]З\\n\\\r",
											"(\\\")_(\\\")\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Зайчик 1 строка\", function () {\r",
											"    pm.expect(zai).to.include(\"(\\\\__/)\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Зайчик 2 строка\", function () {\r",
											"    pm.expect(zai).to.include(\"(='.'=)\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Зайчик 3 строка\", function () {\r",
											"    pm.expect(zai).to.include(\"E[:]|||||[:]З\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Зайчик 4 строка\", function () {\r",
											"    pm.expect(zai).to.include(\"(\\\")_(\\\")\");\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3d1c0d8f-68d7-42d2-ac61-8ffb563783b2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://ya.ru"
							},
							"response": []
						},
						{
							"name": "Jira: это точно запрошенный таск?",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5d72d7a-a64a-4c4b-9bde-fdd5d99ecb91",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Подключилось к задаче\", function () {\r",
											"    pm.response.to.have.status(200, \"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Вернулась правильная задача\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"POCH-2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "66faa236-2e93-4f4d-880c-45080ca0c705",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "ATATT3xFfGF0-EdDG6lT7sdcmCyMoj7zhD_iNlqV86GYz1iILF9MWuK8isCUYXG4omIxX17ykZjtTY-11thUg6bAANRloW7jnkdLf3HQF1VYQVwQkE8wjkIlvPGMmSyU6Bdy3QCFvrJQ0ZxkqR49vjreUCQaLifqtMiCAsV2XyYQ1TnDzTIrHdQ=9C38B0A6",
										"username": "pochkavirta@gmail.com"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://pochkavirta.atlassian.net/rest/api/3/issue/POCH-2/"
							},
							"response": []
						},
						{
							"name": "Jira: создаем комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5d72d7a-a64a-4c4b-9bde-fdd5d99ecb91",
										"exec": [
											"pm.test(\"Статус: 201 Created\", function () {\r",
											"    pm.response.to.have.status(201, \"Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2806b312-fe08-461d-a427-39fb5f9bb56a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "ATATT3xFfGF0_42Y87FxFBiKWpcZ9lwfcSyuntTuqIvRnZOhgdcuazcIpjEXUvdo1ZDUx1puIAw-DEPUEhluDY2PQ3PEaHhrAuIjhvqU5iiH5JbPfKYjBSPPrtZjgPm6Jz3tdCJPtLAEkblXW9p6LG3mRxtg9wbXf5WOr3IjFCSTZ5UVfrbmzyg=EE0F080B",
										"username": "pochkavirta@gmail.com"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"body\": {\r\n    \"content\": [\r\n      {\r\n        \"content\": [\r\n          {\r\n            \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.\",\r\n            \"type\": \"text\"\r\n          }\r\n        ],\r\n        \"type\": \"paragraph\"\r\n      }\r\n    ],\r\n    \"type\": \"doc\",\r\n    \"version\": 1\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://pochkavirta.atlassian.net/rest/api/3/issue/POCH-2/comment"
							},
							"response": []
						},
						{
							"name": "Users: проверяем name компании в ответе",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"pm.test(\"Проверить компанию Петушки через обычный запрос\", function () {\r",
											"    pm.expect(jsonData.companys[1].name).to.include(\"Петушки\");\r",
											"});\r",
											"\r",
											"pm.test(\"Найти компанию Петушки через nested.include\", function () {\r",
											"    pm.expect(jsonData).to.nested.include({'companys[1].name': 'Петушки'});\r",
											"});\r",
											"\r",
											"//поиск массива\r",
											"pm.test(\"Проверить есть ли компания Петушки\", function () {\r",
											"    pm.expect(jsonData.companys).to.deep.include({\r",
											"            \"name\": \"Петушки\",\r",
											"            \"id_company\": 8\r",
											"        });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d8fe1347-4856-47ae-a259-41836f52e08c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test_cu_11@mail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/getuserfull"
							},
							"response": []
						},
						{
							"name": "Users: массивы возвращать всегда, даже пустые!",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"pm.test(\"Проверяем наличие свойства tasks\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"tasks\");\r",
											"});\r",
											"\r",
											"console.log(jsonData.tasks);\r",
											"\r",
											"pm.test(\"Проверяем наличие свойства companys\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"companys\");\r",
											"});\r",
											"\r",
											"console.log(jsonData.companys);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ac48ff7e-db13-46e0-8353-6c2657f3620c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test_cu_11@mail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://users.bugred.ru/tasks/rest/getuserfull"
							},
							"response": []
						}
					],
					"id": "3eb3c330-6873-4996-9930-c953ae29a0e9"
				},
				{
					"name": "Lesson 5",
					"item": [
						{
							"name": "JSON doRegister instanceOF",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "33ea6bb0-f321-4eb6-a89e-d7238e481b90",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "test_demo_1@gmail.com",
											"type": "text"
										},
										{
											"key": "name",
											"value": "Демо 1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": "http://users.bugred.ru/tasks/rest/doregister"
							},
							"response": []
						}
					],
					"id": "c12ccbed-d99b-4de1-8021-e48f4b963459"
				},
				{
					"name": "doRegister",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08e2e740-c7b5-4936-a3ff-3bd3681b2519",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "22ff2ec6-2491-419c-b8ae-e3900ff0cb06",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "509e014f-c445-4765-b3e0-0b6d23166de1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "test_demo_1@gmail.com",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Демо 1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": "http://users.bugred.ru/tasks/rest/doregister"
					},
					"response": []
				}
			],
			"id": "926a8645-a023-4a7c-96ea-1628b13e6f1f"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8052d9d4-3203-4961-9c3e-18aa4c3cebdc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "adf2f278-b224-4f6d-85be-5f3fb88386d0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "fb189c94-9620-4c91-b71d-267907550ae3",
			"key": "url",
			"value": "",
			"type": "string"
		}
	]
}